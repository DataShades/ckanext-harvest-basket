{"config":{"lang":["en"],"separator":"[\\s\\-\\.\\_]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>The ckanext-harvest-basket extension adds a set of custom harvesters to CKAN, making it easy to gather data from various platforms like ODS, ArcGIS, Socrata, DKAN, Junar, and more. With these harvesters, you can automatically pull datasets from different sources into your CKAN instance, helping you manage and share data more efficiently.</p> <p>Key features:</p> <ul> <li>Harvesters for popular data platforms, including CKAN, ODS, ArcGIS, Socrata, DKAN, Junar and others.</li> <li>Integration with the ckanext-transmute extension, which allows you to transform datasets during the harvesting process using a harvest source configuration.</li> <li>Source checkup preview. When creating a source, the harvester will try to connect to the remote portal and harvest one dataset to check if it\u2019s accessible.</li> <li>Anonymous user restrictions. You can disallow anonymous users from accessing harvester pages.</li> </ul> <p>See the documentation for more information.</p>"},{"location":"#quick-start","title":"Quick start","text":"<ol> <li> <p>Install the extension from <code>PyPI</code>:     <pre><code>pip install ckanext-harvest-basket\n</code></pre></p> </li> <li> <p>Enable the main plugin and harvesters you want to use in your CKAN configuration file (e.g. <code>ckan.ini</code> or <code>production.ini</code>):</p> <pre><code>ckan.plugins = ... harvest_basket arcgis_harvester socrata_harvester ...\n</code></pre> </li> </ol>"},{"location":"#developer-installation","title":"Developer installation","text":"<p>To install <code>ckanext-harvest-basket</code> for development, activate your CKAN virtualenv and do:</p> <pre><code>git clone https://github.com/DataShades/ckanext-harvest-basket.git\ncd ckanext-harvest-basket\npip install -e '.[dev]'\n</code></pre>"},{"location":"#tests","title":"Tests","text":"<p>To run the tests, do:</p> <pre><code>pytest --ckan-ini=test.ini\n</code></pre>"},{"location":"#license","title":"License","text":"<p>AGPL</p>"},{"location":"configuration/","title":"Configuration","text":"<p>A list of configuration settings for the harvest basket extension:</p> <p><code>ckanext.harvest_basket.allow_anonymous</code> [optional]</p> <p>By default, <code>ckanext-harvest</code> does not restrict access to the harvester pages. This means that anyone can access the harvester pages, even if they are not logged in.</p> <p>You can disallow accessing harvester pages for anonymous users.</p> <p>Default: <code>True</code></p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#requirements","title":"Requirements","text":"<p>Compatibility with core CKAN versions:</p> CKAN version Compatible? 2.9 yes 2.10 yes 2.11 yes master not tested"},{"location":"installation/#installation_1","title":"Installation","text":"<ol> <li> <p>Install the extension from <code>PyPI</code>:     <pre><code>pip install ckanext-harvest-basket\n</code></pre></p> </li> <li> <p>Enable the main plugin and harvesters you want to use in your CKAN configuration file (e.g. <code>ckan.ini</code> or <code>production.ini</code>):</p> <pre><code>ckan.plugins = ... harvest_basket arcgis_harvester socrata_harvester ...\n</code></pre> </li> </ol>"},{"location":"installation/#dependencies","title":"Dependencies","text":"<p>The extension requires the following CKAN extensions to be installed and enabled:</p> <ol> <li> <p>ckanext-harvest: This extension is built on top of ckanext-harvest. You need to install and enable it because ckanext-harvest-basket only provides the harvesters, not the harvesting process itself. Without it, the extension won\u2019t work.</p> </li> <li> <p>ckanext-transmute (optional): If you want to modify remote data based on a schema in your harvest source configuration, you'll need to install and enable ckanext-transmute.</p> </li> <li> <p>ckanext-dcat (optional): If you want to harvest metadata from DCAT JSON files, you'll need to install and enable ckanext-dcat, as we're inheriting the original DCAT harvester from there.</p> </li> <li> <p>ckanext-spatial (optional): If you want to harvest metadata from CSW servers, you'll need to install and enable ckanext-spatial, as we're inheriting the original CSW harvester from there.</p> </li> </ol>"},{"location":"harvesters/ArcGIS/","title":"ArcGIS","text":"<p>The ArcGIS harvester is a CKAN harvester that can be used to harvest metadata from ArcGIS open data portals.</p> <p>ArcGIS is a platform for organizations to create, manage, share, and analyze spatial data.</p>"},{"location":"harvesters/ArcGIS/#enable-the-harvester","title":"Enable the Harvester","text":"<p>To enable the harvester, add <code>arcgis_harvester</code> to the <code>ckan.plugins</code> setting in your CKAN configuration file (e.g., <code>ckan.ini</code> or <code>production.ini</code>).</p> <pre><code>ckan.plugins = ... arcgis_harvester ...\n</code></pre>"},{"location":"harvesters/ArcGIS/#configuration-options","title":"Configuration options","text":"Max DatasetsTransmute Schema <p> <code>max_datasets</code> [optional]</p> <p>The <code>max_datasets</code> parameters is used to limit an amount of datasets you want to harvest for this harvest source.</p> <p>This feature is useful for testing or development purposes, allowing you to perform a quick test with a smaller subset of data and verify that the harvested data meets your requirements.</p> <p>If set to <code>0</code>, all available datasets will be harvested.</p> <p>Type: <code>int</code></p> <p>Default: <code>0</code></p> <p> <code>tsm_schema</code> [optional]</p> <p>Transmute schema allows you to define a schema that will be used to transform the harvested data before we're trying to create/update a dataset in CKAN.</p> <p>This is useful when the harvested data doesn't match the CKAN dataset schema and you need to transform it.</p> <p>Otherwise, you'd need to write a custom harvester and process the remote data yourself.</p> <p>See the <code>ckanext-transmute</code> documentation to learn more about the transmute schema syntax.</p> <p>Type: <code>dict[str, Any]</code></p> <p>Default: <code>None</code></p>"},{"location":"harvesters/CKAN/","title":"CKAN","text":"<p>The CKAN harvester can be used to harvest metadata from other CKAN Data Portals.</p> <p>We altered the original CKAN harvester to allow using the Transmute schema to make a harvester more flexible.</p>"},{"location":"harvesters/CKAN/#enable-the-harvester","title":"Enable the Harvester","text":"<p>To enable the harvester, add <code>custom_ckan_harvester</code> to the <code>ckan.plugins</code> setting in your CKAN configuration file (e.g., <code>ckan.ini</code> or <code>production.ini</code>).</p> <pre><code>ckan.plugins = ... custom_ckan_harvester ...\n</code></pre>"},{"location":"harvesters/CKAN/#configuration-options","title":"Configuration options","text":"Default CKAN Harvester ConfigurationMax DatasetsTransmute Schema <p>Since we're just inheriting the original CKAN harvester, you still can use the original configuration options. Check the original <code>ckanext-harvest</code> documentation for more information.</p> <p> <code>max_datasets</code> [optional]</p> <p>The <code>max_datasets</code> parameters is used to limit an amount of datasets you want to harvest for this harvest source.</p> <p>This feature is useful for testing or development purposes, allowing you to perform a quick test with a smaller subset of data and verify that the harvested data meets your requirements.</p> <p>If set to <code>0</code>, all available datasets will be harvested.</p> <p>Type: <code>int</code></p> <p>Default: <code>0</code></p> <p> <code>tsm_schema</code> [optional]</p> <p>Transmute schema allows you to define a schema that will be used to transform the harvested data before we're trying to create/update a dataset in CKAN.</p> <p>This is useful when the harvested data doesn't match the CKAN dataset schema and you need to transform it.</p> <p>Otherwise, you'd need to write a custom harvester and process the remote data yourself.</p> <p>See the <code>ckanext-transmute</code> documentation to learn more about the transmute schema syntax.</p> <p>Type: <code>dict[str, Any]</code></p> <p>Default: <code>None</code></p>"},{"location":"harvesters/CSIRO/","title":"CSIRO","text":"<p>The CSIRO harvester is a CKAN harvester that can be used to harvest metadata from CSIRO data sources.</p> <p>CSIRO is Australia's national science research agency. It is a government agency that conducts scientific research to solve problems that are important to Australia and the world.</p> <p>The CSIRO Data Access Portal provides access to research data, software and other digital assets published by CSIRO across a range of disciplines.</p>"},{"location":"harvesters/CSIRO/#enable-the-harvester","title":"Enable the Harvester","text":"<p>To enable the harvester, add <code>basket_csiro_harvester</code> to the <code>ckan.plugins</code> setting in your CKAN configuration file (e.g., <code>ckan.ini</code> or <code>production.ini</code>).</p> <pre><code>ckan.plugins = ... basket_csiro_harvester ...\n</code></pre>"},{"location":"harvesters/CSIRO/#configuration-options","title":"Configuration options","text":"Transmute Schema <p> <code>tsm_schema</code> [optional]</p> <p>Transmute schema allows you to define a schema that will be used to transform the harvested data before we're trying to create/update a dataset in CKAN.</p> <p>This is useful when the harvested data doesn't match the CKAN dataset schema and you need to transform it.</p> <p>Otherwise, you'd need to write a custom harvester and process the remote data yourself.</p> <p>See the <code>ckanext-transmute</code> documentation to learn more about the transmute schema syntax.</p> <p>Type: <code>dict[str, Any]</code></p> <p>Default: <code>None</code></p>"},{"location":"harvesters/CSW/","title":"CSW","text":"<p>The CSW harvester is a CKAN harvester that can be used to harvest metadata from CSW servers. Catalogue Service for the Web (CSW), sometimes seen as Catalogue Service - Web, is a standard for exposing a catalogue of geospatial records in XML on the Internet (over HTTP). The catalogue is made up of records that describe geospatial data (e.g. KML), geospatial services (e.g. WMS), and related resources. </p> <p>Warning</p> <p>The harvester relies on the <code>OWSLib</code> library to interact with the CSW server. To install the required dependencies, install the <code>ckanext-harvest-basket</code> package with the <code>[csw]</code> extra:</p> <pre><code>pip install 'ckanext-harvest-basket[csw]'\n</code></pre>"},{"location":"harvesters/CSW/#enable-the-harvester","title":"Enable the Harvester","text":"<p>To enable the harvester, add <code>basket_csw_harvester</code> to the <code>ckan.plugins</code> setting in your CKAN configuration file (e.g., <code>ckan.ini</code> or <code>production.ini</code>).</p> <pre><code>ckan.plugins = ... basket_csw_harvester ...\n</code></pre>"},{"location":"harvesters/CSW/#configuration-options","title":"Configuration options","text":"Transmute Schema <p> <code>tsm_schema</code> [optional]</p> <p>Transmute schema allows you to define a schema that will be used to transform the harvested data before we're trying to create/update a dataset in CKAN.</p> <p>This is useful when the harvested data doesn't match the CKAN dataset schema and you need to transform it.</p> <p>Otherwise, you'd need to write a custom harvester and process the remote data yourself.</p> <p>See the <code>ckanext-transmute</code> documentation to learn more about the transmute schema syntax.</p> <p>Type: <code>dict[str, Any]</code></p> <p>Default: <code>None</code></p>"},{"location":"harvesters/DCAT_JSON/","title":"DCAT JSON","text":"<p>The DCAT JSON harvester is a CKAN harvester that can be used to harvest metadata from DCAT JSON files.</p> <p>DCAT is an RDF vocabulary designed to facilitate interoperability between data catalogs published on the Web. </p> <p>Warning</p> <p>This harvester is based on the original DCAT harvester from ckanext-dcat, therefore it requires the <code>ckanext-dcat</code> library to be installed.</p>"},{"location":"harvesters/DCAT_JSON/#enable-the-harvester","title":"Enable the Harvester","text":"<p>To enable the harvester, add <code>basket_dcat_json_harvester</code> to the <code>ckan.plugins</code> setting in your CKAN configuration file (e.g., <code>ckan.ini</code> or <code>production.ini</code>).</p> <pre><code>ckan.plugins = ... basket_dcat_json_harvester ...\n</code></pre>"},{"location":"harvesters/DCAT_JSON/#configuration-options","title":"Configuration options","text":"Transmute Schema <p> <code>tsm_schema</code> [optional]</p> <p>Transmute schema allows you to define a schema that will be used to transform the harvested data before we're trying to create/update a dataset in CKAN.</p> <p>This is useful when the harvested data doesn't match the CKAN dataset schema and you need to transform it.</p> <p>Otherwise, you'd need to write a custom harvester and process the remote data yourself.</p> <p>See the <code>ckanext-transmute</code> documentation to learn more about the transmute schema syntax.</p> <p>Type: <code>dict[str, Any]</code></p> <p>Default: <code>None</code></p>"},{"location":"harvesters/DKAN/","title":"DKAN","text":"<p>The DKAN harvester is a CKAN harvester that can be used to harvest metadata from DKAN open data portals.</p> <p>DKAN is a Drupal-based community-driven, free and open source open data platform that gives organisations and individuals ultimate freedom to publish and consume structured information.</p>"},{"location":"harvesters/DKAN/#enable-the-harvester","title":"Enable the Harvester","text":"<p>To enable the harvester, add <code>dkan_harvester</code> to the <code>ckan.plugins</code> setting in your CKAN configuration file (e.g., <code>ckan.ini</code> or <code>production.ini</code>).</p> <pre><code>ckan.plugins = ... dkan_harvester ...\n</code></pre>"},{"location":"harvesters/DKAN/#configuration-options","title":"Configuration options","text":"DelayMax DatasetsTransmute Schema <p> <code>delay</code> [optional]</p> <p>The <code>delay</code> parameter is used to control the time between requests to the remote API.</p> <p>When we're working with remote APIs, we need to be mindful of the rate limits imposed by the API provider. The <code>delay</code> parameter allows us to control the time between requests to the remote API. This is done to avoid exceeding the rate limits and to ensure that the requests are spaced out.</p> <p>Type: <code>int</code></p> <p>Default: <code>0</code></p> <p> <code>max_datasets</code> [optional]</p> <p>The <code>max_datasets</code> parameters is used to limit an amount of datasets you want to harvest for this harvest source.</p> <p>This feature is useful for testing or development purposes, allowing you to perform a quick test with a smaller subset of data and verify that the harvested data meets your requirements.</p> <p>If set to <code>0</code>, all available datasets will be harvested.</p> <p>Type: <code>int</code></p> <p>Default: <code>0</code></p> <p> <code>tsm_schema</code> [optional]</p> <p>Transmute schema allows you to define a schema that will be used to transform the harvested data before we're trying to create/update a dataset in CKAN.</p> <p>This is useful when the harvested data doesn't match the CKAN dataset schema and you need to transform it.</p> <p>Otherwise, you'd need to write a custom harvester and process the remote data yourself.</p> <p>See the <code>ckanext-transmute</code> documentation to learn more about the transmute schema syntax.</p> <p>Type: <code>dict[str, Any]</code></p> <p>Default: <code>None</code></p>"},{"location":"harvesters/Junar/","title":"Junar","text":"<p>The Junar harvester is a CKAN harvester that can be used to harvest metadata from Junar data portals.</p> <p>Junar is a data platform that allows organizations to publish, share, and manage data in the cloud.</p>"},{"location":"harvesters/Junar/#enable-the-harvester","title":"Enable the Harvester","text":"<p>To enable the harvester, add <code>junar_harvester</code> to the <code>ckan.plugins</code> setting in your CKAN configuration file (e.g., <code>ckan.ini</code> or <code>production.ini</code>).</p> <pre><code>ckan.plugins = ... junar_harvester ...\n</code></pre>"},{"location":"harvesters/Junar/#configuration-options","title":"Configuration options","text":"Auth KeyMax DatasetsTransmute Schema <p><code>auth_key</code> [optional]</p> <p>The <code>Junar</code> API requires a key to operate. To get an auth key, you'll have to access the \"Developers\" page on a  respective Junar portal. For example, see the City of Palo Alto data portal.</p> <p></p> <p>Warning</p> <p>If the <code>auth_key</code> is not provided, the <code>SearchError</code> exception will be raised.</p> <p>Type: <code>str</code></p> <p>Default: <code>None</code></p> <p>To use the Junar harvester you need to provide a Junar API key. You can get one by registering at Junar.</p> <p> <code>max_datasets</code> [optional]</p> <p>The <code>max_datasets</code> parameters is used to limit an amount of datasets you want to harvest for this harvest source.</p> <p>This feature is useful for testing or development purposes, allowing you to perform a quick test with a smaller subset of data and verify that the harvested data meets your requirements.</p> <p>If set to <code>0</code>, all available datasets will be harvested.</p> <p>Type: <code>int</code></p> <p>Default: <code>0</code></p> <p> <code>tsm_schema</code> [optional]</p> <p>Transmute schema allows you to define a schema that will be used to transform the harvested data before we're trying to create/update a dataset in CKAN.</p> <p>This is useful when the harvested data doesn't match the CKAN dataset schema and you need to transform it.</p> <p>Otherwise, you'd need to write a custom harvester and process the remote data yourself.</p> <p>See the <code>ckanext-transmute</code> documentation to learn more about the transmute schema syntax.</p> <p>Type: <code>dict[str, Any]</code></p> <p>Default: <code>None</code></p>"},{"location":"harvesters/ODS/","title":"OpenDataSoft","text":"<p>The OpenDataSoft Harvester is a CKAN harvester that allows to harvest datasets from OpenDataSoft platforms.</p> <p>OpenDataSoft is a cloud-based turnkey platform for data publishing and API management. It is designed for data owners who need to share data with a larger audience in a simple and cost-effective way.</p>"},{"location":"harvesters/ODS/#enable-the-harvester","title":"Enable the Harvester","text":"<p>To enable the harvester, add <code>ods_harvester</code> to the <code>ckan.plugins</code> setting in your CKAN configuration file (e.g., <code>ckan.ini</code> or <code>production.ini</code>).</p> <pre><code>ckan.plugins = ... ods_harvester ...\n</code></pre>"},{"location":"harvesters/ODS/#configuration-options","title":"Configuration options","text":"WhereMax DatasetsTransmute Schema <p> <code>where</code> [optional]</p> <p>The <code>where</code> parameter is used to filter the results returned by the remote API.</p> <p>A <code>where</code> filter is a text expression performing a simple full-text search that can also include logical operations (NOT, AND, OR...) and lots of other functions to perform complex and precise search operations.</p> <p>For more information, see Opendatasoft Query Language (ODSQL) reference documentation.</p> <p>Example</p> <pre><code>my_numeric_field &gt; 10 and my_text_field like \"paris\" or within_distance(my_geo_field, geom'POINT(1 1)', 1km)\n</code></pre> <p>Type: <code>str</code></p> <p>Default: <code>None</code></p> <p> <code>max_datasets</code> [optional]</p> <p>The <code>max_datasets</code> parameters is used to limit an amount of datasets you want to harvest for this harvest source.</p> <p>This feature is useful for testing or development purposes, allowing you to perform a quick test with a smaller subset of data and verify that the harvested data meets your requirements.</p> <p>If set to <code>0</code>, all available datasets will be harvested.</p> <p>Type: <code>int</code></p> <p>Default: <code>0</code></p> <p> <code>tsm_schema</code> [optional]</p> <p>Transmute schema allows you to define a schema that will be used to transform the harvested data before we're trying to create/update a dataset in CKAN.</p> <p>This is useful when the harvested data doesn't match the CKAN dataset schema and you need to transform it.</p> <p>Otherwise, you'd need to write a custom harvester and process the remote data yourself.</p> <p>See the <code>ckanext-transmute</code> documentation to learn more about the transmute schema syntax.</p> <p>Type: <code>dict[str, Any]</code></p> <p>Default: <code>None</code></p>"},{"location":"harvesters/Socrata/","title":"Socrata","text":"<p>The Socrata harvester is a CKAN harvester that can be used to harvest metadata from Socrata open data portals.</p> <p>Socrata is a company that provides an open data repository service that many government agencies use to make open data available to the public.</p>"},{"location":"harvesters/Socrata/#enable-the-harvester","title":"Enable the Harvester","text":"<p>To enable the harvester, add <code>socrata_harvester</code> to the <code>ckan.plugins</code> setting in your CKAN configuration file (e.g., <code>ckan.ini</code> or <code>production.ini</code>).</p> <pre><code>ckan.plugins = ... socrata_harvester ...\n</code></pre>"},{"location":"harvesters/Socrata/#configuration-options","title":"Configuration options","text":"LimitMax DatasetsTransmute Schema <p> <code>limit</code> [optional]</p> <p>The <code>limit</code> parameter is used to control the number of entities returned in a single response.</p> <p>When we're working with remote APIs, we utilize the pagination technique to limit the number of entities returned in a single response. This is done to avoid performance issues and to ensure that the response is manageable.</p> <p>Type: <code>int</code></p> <p>Default: <code>50</code></p> <p> <code>max_datasets</code> [optional]</p> <p>The <code>max_datasets</code> parameters is used to limit an amount of datasets you want to harvest for this harvest source.</p> <p>This feature is useful for testing or development purposes, allowing you to perform a quick test with a smaller subset of data and verify that the harvested data meets your requirements.</p> <p>If set to <code>0</code>, all available datasets will be harvested.</p> <p>Type: <code>int</code></p> <p>Default: <code>0</code></p> <p> <code>tsm_schema</code> [optional]</p> <p>Transmute schema allows you to define a schema that will be used to transform the harvested data before we're trying to create/update a dataset in CKAN.</p> <p>This is useful when the harvested data doesn't match the CKAN dataset schema and you need to transform it.</p> <p>Otherwise, you'd need to write a custom harvester and process the remote data yourself.</p> <p>See the <code>ckanext-transmute</code> documentation to learn more about the transmute schema syntax.</p> <p>Type: <code>dict[str, Any]</code></p> <p>Default: <code>None</code></p>"},{"location":"harvesters/base/","title":"Base","text":"<p>We utilize different technologies to gather data from various platforms like ODS, ArcGIS, Socrata, DKAN, Junar, and more. With these harvesters, you can automatically pull datasets from different sources into your CKAN instance, helping you manage and share data more efficiently.</p> <p>Some data portal provides an API to access their data, and some do not. For those that do not provide an API, we can use web scraping to gather data. Web scraping is a technique to extract data from websites. Web scraping is not so reliable, as using an API, but it is the only option when the data portal does not provide a public API.</p>"},{"location":"harvesters/base/#transmute-schema","title":"Transmute Schema","text":"<p>Each harvester has an integration with the ckanext-transmute extension, which allows you to transform datasets during the harvesting process using a harvest source configuration.</p> <p>It's helpful, when you need to adjust the result data to fit your CKAN instance dataset schema. To use the <code>ckanext-transmute</code>, you'll have to install and enable it in your CKAN instance. Other from that, you need to provide a <code>tsm_config</code> key into your harvest source configuration.</p> <p>The syntax and all the information about installing and using the <code>ckanext-transmute</code> extension can be found in the ckanext-transmute documentation</p>"}]}